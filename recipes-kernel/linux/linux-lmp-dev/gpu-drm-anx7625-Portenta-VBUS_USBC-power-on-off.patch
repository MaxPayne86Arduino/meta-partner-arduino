From 9fc240fda3f67c4914da05e913b6d2cc2f1b3f2d Mon Sep 17 00:00:00 2001
From: Jorge Ramirez-Ortiz <jorge@foundries.io>
Date: Wed, 10 Feb 2021 10:22:06 +0100
Subject: [PATCH] gpu: drm: anx7625 (Portenta) - VBUS_USBC power on/off

Signed-off-by: Jorge Ramirez-Ortiz <jorge@foundries.io>
---
 drivers/gpu/drm/bridge/anx7625.c | 112 ++++++++++++++++++-------------
 drivers/gpu/drm/bridge/anx7625.h |   1 -
 2 files changed, 67 insertions(+), 46 deletions(-)

diff --git a/drivers/gpu/drm/bridge/anx7625.c b/drivers/gpu/drm/bridge/anx7625.c
index 10d23882f34b..d785c56d4bcc 100644
--- a/drivers/gpu/drm/bridge/anx7625.c
+++ b/drivers/gpu/drm/bridge/anx7625.c
@@ -52,6 +52,9 @@ dev_printk(KERN_ERR, dev, fmt, ##__VA_ARGS__)
 #endif
 
 
+
+
+
 /*
  * There is a sync issue while access I2C register between AP(CPU) and
  * internal firmware(OCM), to avoid the race condition, AP should access
@@ -1102,24 +1105,37 @@ static int sp_tx_edid_read(struct anx7625_data *ctx, u8 *pedid_blocks_buf)
 static void anx7625_power_on(struct anx7625_data *ctx)
 {
 	struct device *dev = &ctx->client->dev;
+	struct gpio_desc *pwr;
 
 	if (!ctx->pdata.low_power_mode) {
 		DRM_DEV_DEBUG_DRIVER(dev, "not low power mode!\n");
 		return;
 	}
 
+	/* portenta: VBUS_USBC on (0) */
+	pwr = devm_gpiod_get_optional(dev, "usbc_pwr", GPIOD_OUT_LOW);
+	if (!IS_ERR(pwr)) {
+		DRM_DEV_DEBUG_DRIVER(dev, "power on, VBUS_USBC: %d\n",
+				     gpiod_get_value(pwr));
+		devm_gpiod_put(dev, pwr);
+		usleep_range(1000, 1100);
+	} else
+		DRM_DEV_DEBUG_DRIVER(dev, "power on, VBUS_USBC failed %ld\n",
+				     PTR_ERR(pwr));
+
+	/* 10ms: as per data sheet */
 	gpiod_set_value(ctx->pdata.gpio_p_on, 1);
-	usleep_range(100, 110);
+	usleep_range(10000, 10100);
 
+	/* 10ms: as per data sheet */
 	gpiod_set_value(ctx->pdata.gpio_reset, 1);
-	usleep_range(100, 110);
-
-	DRM_DEV_DEBUG_DRIVER(dev, "power on\n");
+	usleep_range(10000, 10100);
 }
 
 static void anx7625_power_standby(struct anx7625_data *ctx)
 {
 	struct device *dev = &ctx->client->dev;
+	struct gpio_desc *pwr;
 
 	if (!ctx->pdata.low_power_mode) {
 		DRM_DEV_DEBUG_DRIVER(dev, "not low power mode!\n");
@@ -1127,12 +1143,21 @@ static void anx7625_power_standby(struct anx7625_data *ctx)
 	}
 
 	gpiod_set_value(ctx->pdata.gpio_reset, 0);
-	usleep_range(100, 110);
+	usleep_range(1000, 1100);
 
 	gpiod_set_value(ctx->pdata.gpio_p_on, 0);
-	usleep_range(100, 110);
+	usleep_range(1000, 1100);
 
-	DRM_DEV_DEBUG_DRIVER(dev, "power off\n");
+	/* portenta: VBUS_USBC off (1) */
+	pwr = devm_gpiod_get_optional(dev, "usbc_pwr", GPIOD_OUT_HIGH);
+	if (!IS_ERR(pwr) ) {
+		DRM_DEV_DEBUG_DRIVER(dev, "power off, VBUS_USBC: %d\n",
+				     gpiod_get_value(pwr));
+		devm_gpiod_put(dev, pwr);
+		usleep_range(1000, 1100);
+	} else
+		DRM_DEV_DEBUG_DRIVER(dev, "power off, VBUS_USBC failed %ld\n",
+				     PTR_ERR(pwr));
 }
 
 static void anx7625_config(struct anx7625_data *ctx)
@@ -1283,13 +1308,12 @@ static void anx7625_chip_control(struct anx7625_data *ctx, int state)
 static void anx7625_init_gpio(struct anx7625_data *platform)
 {
 	struct device *dev = &platform->client->dev;
+	struct gpio_desc *pwr;
 
-	DRM_DEV_DEBUG_DRIVER(dev, "init gpio\n");
+	DRM_DEV_DEBUG_DRIVER(dev, "gpio initialization, VBUS_USBC=1\n");
 
-	/* usb-c direction OUT, default to high*/
-	platform->pdata.gpio_usbc_pwr = devm_gpiod_get_optional(dev,
-								"usbc_pwr",
-								GPIOD_OUT_HIGH);
+	/* portenta: VBUS_USBC off (gpio = 1) */
+	pwr = devm_gpiod_get_optional(dev, "usbc_pwr", GPIOD_OUT_HIGH);
 
 	/* keep the ANX powered off: power/reset gpios are active high  */
 	platform->pdata.gpio_p_on = devm_gpiod_get_optional(dev, "enable",
@@ -1308,25 +1332,27 @@ static void anx7625_init_gpio(struct anx7625_data *platform)
 	if (platform->pdata.gpio_p_on && platform->pdata.gpio_reset) {
 		platform->pdata.low_power_mode = 1;
 		DRM_DEV_DEBUG_DRIVER(dev, "LOW POWER MODE enabled, "
-				     "usbc_pwr (%d) = %d, "
-				     "POWER_EN (%d) = %d, "
-				     "RESET_N (%d) =  %d\n",
-				     desc_to_gpio(platform->pdata.gpio_usbc_pwr),
-				     gpiod_get_value(platform->pdata.gpio_usbc_pwr),
+				     "VBUS_USBC(%d) = %d, "
+				     "POWER_EN(%d) = %d, "
+				     "RESET_N(%d) =  %d\n",
+				     !IS_ERR(pwr) ? desc_to_gpio(pwr) : 0,
+				     !IS_ERR(pwr) ? gpiod_get_value(pwr) : 0,
 				     desc_to_gpio(platform->pdata.gpio_p_on),
 				     gpiod_get_value(platform->pdata.gpio_p_on),
 				     desc_to_gpio(platform->pdata.gpio_reset),
 				     gpiod_get_value(platform->pdata.gpio_reset));
-
-		devm_gpiod_put(dev, platform->pdata.gpio_usbc_pwr);
-
 		atomic_set(&platform->power_status, 0);
 	} else {
+		/* this is untested, probably needs some work */
 		platform->pdata.low_power_mode = 0;
 		DRM_DEV_DEBUG_DRIVER(dev, "not low power mode.\n");
 		anx7625_disable_pd_protocol(platform);
 		atomic_set(&platform->power_status, 1);
 	}
+
+	/* return VBUS_USBC back to users */
+	if (!IS_ERR(pwr))
+		devm_gpiod_put(dev, pwr);
 }
 
 static void anx7625_stop_dp_work(struct anx7625_data *ctx)
@@ -1941,6 +1967,9 @@ static irqreturn_t anx7625_cable_isr(int irq, void *data)
 	struct anx7625_data *ctx = (struct anx7625_data *)data;
 
 	mutex_lock(&ctx->lock);
+	/* as per data sheet */
+	msleep(10);
+
 	printk("anx: cable isr\n");
 	if (!atomic_read(&ctx->cable_connected)) {
 		if (ctx->hpd_status)
@@ -1961,34 +1990,29 @@ static irqreturn_t anx7625_cable_isr(int irq, void *data)
 	return IRQ_HANDLED;
 }
 
-static irqreturn_t anx7625_comm_irq(int irq, void *data)
+static irqreturn_t anx7625_comm_isr(int irq, void *data)
 {
 	struct anx7625_data *ctx = (struct anx7625_data *)data;
+	int sys_status, itype, ivector, cc_status;
 
+#define STS_HPD_CHANGE \
+	(((sys_status & HPD_STATUS) != \
+	 (sys_sta_bak & HPD_STATUS)) ? HPD_STATUS_CHANGE : 0)
+
+	mutex_lock(&ctx->lock);
 	if (atomic_read(&ctx->power_status) < 1) {
 		printk("anx: comm irq NONE - no power, must be spurious\n");
-			return IRQ_NONE;
+		mutex_unlock(&ctx->lock);
+		return IRQ_NONE;
 	}
 
 	if (!atomic_read(&ctx->cable_connected)) {
-		printk("anx: comm irq NONE - cable not connected, must be spurious\n");
+		printk("anx: comm irq NONE - cable not connected, "
+		       "must be spurious\n");
+		mutex_unlock(&ctx->lock);
 		return IRQ_NONE;
 	}
-	printk("anx: comm irq\n");
-
-	return IRQ_WAKE_THREAD;
-}
 
-static irqreturn_t anx7625_comm_isr(int irq, void *data)
-{
-	struct anx7625_data *ctx = (struct anx7625_data *)data;
-	int sys_status, itype, ivector, cc_status;
-
-#define STS_HPD_CHANGE \
-	(((sys_status & HPD_STATUS) != \
-	 (sys_sta_bak & HPD_STATUS)) ? HPD_STATUS_CHANGE : 0)
-
-	mutex_lock(&ctx->lock);
 	printk("anx: comm isr starts -------------------------------\n");
 	itype = anx7625_reg_read(ctx, ctx->i2c.tcpc_client,
 				 TCPC_INTR_ALERT_1);
@@ -2027,7 +2051,6 @@ static irqreturn_t anx7625_comm_isr(int irq, void *data)
 	if (sys_status & BIT(1))
 		printk("anx: - Reserved \n");
 
-
 	if (sys_status & BIT(2))
 		printk("anx: - VCONN status ON\n");
 	if (!(sys_status & BIT(2)))
@@ -2146,11 +2169,15 @@ static int anx7625_i2c_probe(struct i2c_client *client,
 	mutex_init(&platform->lock);
 	i2c_set_clientdata(client, platform);
 	anx7625_init_gpio(platform);
+	atomic_set(&platform->cable_connected, 0);
 
-	ret = gpiod_to_irq(platform->pdata.gpio_cbl_det);
+	ret = anx7625_register_i2c_dummy_clients(platform, client);
 	if (ret < 0)
 		goto free_platform;
 
+	ret = gpiod_to_irq(platform->pdata.gpio_cbl_det);
+	if (ret < 0)
+		goto free_platform;
 	platform->pdata.cbl_det_irq = ret;
 
 	ret = gpiod_to_irq(platform->pdata.gpio_intr_comm);
@@ -2158,11 +2185,6 @@ static int anx7625_i2c_probe(struct i2c_client *client,
 		goto free_platform;
 	client->irq = ret;
 
-	ret = anx7625_register_i2c_dummy_clients(platform, client);
-	if (ret < 0)
-		goto free_platform;
-
-	atomic_set(&platform->cable_connected, 0);
 	ret = devm_request_threaded_irq(dev, platform->pdata.cbl_det_irq,
 					anx7625_cable_irq,
 					anx7625_cable_isr,
@@ -2173,7 +2195,7 @@ static int anx7625_i2c_probe(struct i2c_client *client,
 		goto free_platform;
 
 	ret = devm_request_threaded_irq(dev, client->irq,
-					anx7625_comm_irq,
+					NULL,
 					anx7625_comm_isr,
 					IRQF_TRIGGER_FALLING | IRQF_ONESHOT,
 					"anx7625-intr-comm", platform);
diff --git a/drivers/gpu/drm/bridge/anx7625.h b/drivers/gpu/drm/bridge/anx7625.h
index c7a982791105..0d685f7896d5 100644
--- a/drivers/gpu/drm/bridge/anx7625.h
+++ b/drivers/gpu/drm/bridge/anx7625.h
@@ -385,7 +385,6 @@ struct s_edid_data {
 /***************** Display End *****************/
 
 struct anx7625_platform_data {
-	struct gpio_desc *gpio_usbc_pwr;
 	struct gpio_desc *gpio_p_on;
 	struct gpio_desc *gpio_reset;
 	struct gpio_desc *gpio_cbl_det;
-- 
2.30.0

