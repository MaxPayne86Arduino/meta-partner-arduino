From b181d6ef60d96a6b90c8e2295f69ba572dbe360c Mon Sep 17 00:00:00 2001
From: Massimo Pennazio <maxipenna@libero.it>
Date: Thu, 10 Aug 2023 15:29:12 +0000
Subject: [PATCH 1/3] NXP V4L2 patch 1/3 courtesy of weiping.liu@nxp.com

---
 .../media/platform/mxc/capture/mx6s_capture.c | 39 +++++++++++++++++--
 .../media/platform/mxc/capture/mxc_mipi_csi.c | 29 ++++++++++++--
 2 files changed, 62 insertions(+), 6 deletions(-)

diff --git a/drivers/media/platform/mxc/capture/mx6s_capture.c b/drivers/media/platform/mxc/capture/mx6s_capture.c
index 33cac103aa96..cd77e6547c39 100644
--- a/drivers/media/platform/mxc/capture/mx6s_capture.c
+++ b/drivers/media/platform/mxc/capture/mx6s_capture.c
@@ -266,6 +266,12 @@ static struct mx6s_fmt formats[] = {
 		.pixelformat	= V4L2_PIX_FMT_SBGGR8,
 		.mbus_code	= MEDIA_BUS_FMT_SBGGR8_1X8,
 		.bpp		= 1,
+	}, { /* raw10 */
+		.name		= "RAWRGB10 (SBGGR10)",
+		.fourcc		= V4L2_PIX_FMT_SBGGR10,
+		.pixelformat	= V4L2_PIX_FMT_SBGGR10,
+		.mbus_code	= MEDIA_BUS_FMT_SBGGR10_1X10,
+		.bpp		= 2,
 	}
 };
 
@@ -838,12 +844,17 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 	switch (csi_dev->fmt->pixelformat) {
 	case V4L2_PIX_FMT_YUV32:
 	case V4L2_PIX_FMT_SBGGR8:
+		csi_dev->csi_two_8bit_sensor_mode = false;
 		width = pix->width;
 		break;
 	case V4L2_PIX_FMT_UYVY:
 	case V4L2_PIX_FMT_YUYV:
-		if (csi_dev->csi_mipi_mode == true)
+	case V4L2_PIX_FMT_SBGGR10: // raw10
+		csi_dev->csi_two_8bit_sensor_mode = true;
+		if (csi_dev->csi_mipi_mode == true) {
+			printk("liutest V4L2_PIX_FMT_SBGGR10 mipi mode %d\n", pix->width);
 			width = pix->width;
+		}
 		else
 			/* For parallel 8-bit sensor input */
 			width = pix->width * 2;
@@ -871,13 +882,31 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 		case V4L2_PIX_FMT_SBGGR8:
 			cr18 |= BIT_MIPI_DATA_FORMAT_RAW8;
 			break;
+		case V4L2_PIX_FMT_SBGGR10:
+			// cr1 |= BIT_PIXEL_BIT;
+			cr18 |= BIT_MIPI_DATA_FORMAT_RAW10;
+			break;
 		default:
 			pr_debug("   fmt not supported\n");
 			return -EINVAL;
 		}
 
 		csi_write(csi_dev, cr18, CSI_CSICR18);
+
+		{
+		// Bayer tile start // liutest
+		u32 cr2 = csi_read(csi_dev, CSI_CSICR2);
+		if (csi_dev->fmt->pixelformat == V4L2_PIX_FMT_SBGGR8 ||
+			csi_dev->fmt->pixelformat == BIT_MIPI_DATA_FORMAT_RAW10) {
+			// 00 GR , 10 BG (19-20bit)
+			cr2 &= ~(0x3 << 19);
+			cr2 |= (0x2 << 19);
+			csi_write(csi_dev, cr2, CSI_CSICR2);
+			printk("liutest BTS set cr2 %X\n", cr2);
+		}
+		}
 	}
+
 	return 0;
 }
 
@@ -1736,8 +1765,10 @@ static int mx6s_csi_mode_sel(struct mx6s_csi_dev *csi_dev)
 	u32 out_val[3];
 	int ret = 0;
 
-	if (of_get_property(np, "fsl,mipi-mode", NULL))
+	if (of_get_property(np, "fsl,mipi-mode", NULL)) {
+		printk("liutest fsl,mipi-mode\n");
 		csi_dev->csi_mipi_mode = true;
+	}
 	else {
 		csi_dev->csi_mipi_mode = false;
 		return ret;
@@ -1780,8 +1811,10 @@ static int mx6s_csi_two_8bit_sensor_mode_sel(struct mx6s_csi_dev *csi_dev)
 {
 	struct device_node *np = csi_dev->dev->of_node;
 
-	if (of_get_property(np, "fsl,two-8bit-sensor-mode", NULL))
+	if (of_get_property(np, "fsl,two-8bit-sensor-mode", NULL)) {
+		printk("liutest fsl,two-8bit-sensor-mode\n");
 		csi_dev->csi_two_8bit_sensor_mode = true;
+	}
 	else {
 		csi_dev->csi_two_8bit_sensor_mode = false;
 	}
diff --git a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
index 069a0b9bb961..60e8fc6b2726 100644
--- a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
+++ b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
@@ -322,6 +322,10 @@ static const struct csis_pix_format mipi_csis_formats[] = {
 		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
 		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
 		.data_alignment = 8,
+	}, {
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
+		.data_alignment = 16,
 	}
 };
 
@@ -470,9 +474,25 @@ static void __mipi_csis_set_format(struct csi_state *state)
 	v4l2_dbg(1, debug, &state->mipi_sd, "fmt: %#x, %d x %d\n",
 		 mf->code, mf->width, mf->height);
 
-	/* Color format */
 	val = mipi_csis_read(state, MIPI_CSIS_ISPCONFIG_CH0);
+	/* Color format */
 	val = (val & ~MIPI_CSIS_ISPCFG_FMT_MASK) | state->csis_fmt->fmt_reg;
+	/* liutest  default is 1
+	  Parallel [11]
+	Output bus width of CH0 is 32 bits.
+	0 : Normal output
+	1 : 32bit data alignment
+	When this bit is set, the outer bus width of CSIS V3.3 is 32.
+	Refers to figures in chapter 12 of MIPI CSI-2 standard spec. */
+	// val &= ~(1<<11);
+	/* Pixel_mode [13:12]
+		b11 : Invalid
+		b10 : Quad pixel mode (RAW8/10/12)
+		b01 : Dual pixel mode (RAW8/10/12, YUV422)
+		b00 : Single pixel mode
+	*/
+	// val = val & ~(0x3 << 12) | (0x1 << 12);
+
 	mipi_csis_write(state, MIPI_CSIS_ISPCONFIG_CH0, val);
 
 	/* Pixel resolution */
@@ -484,10 +504,10 @@ static void mipi_csis_set_hsync_settle(struct csi_state *state,
 								int hs_settle, int clk_settle)
 {
 	u32 val = mipi_csis_read(state, MIPI_CSIS_DPHYCTRL);
-
+	// hs_settle = 6; // liutest 6
 	val = (val & ~MIPI_CSIS_DPHYCTRL_HSS_MASK) |
 				(hs_settle << 24) | (clk_settle << 22);
-
+	printk("liutest hs_settle %d, clk_settle %d\n", hs_settle, clk_settle );
 	mipi_csis_write(state, MIPI_CSIS_DPHYCTRL, val);
 }
 
@@ -509,6 +529,8 @@ static void mipi_csis_set_params(struct csi_state *state)
 		val |= MIPI_CSIS_ISPCFG_ALIGN_32BIT;
 	else /* Normal output */
 		val &= ~MIPI_CSIS_ISPCFG_ALIGN_32BIT;
+	// for raw8/10
+	// val |= 2 << 12;
 	mipi_csis_write(state, MIPI_CSIS_ISPCONFIG_CH0, val);
 
 	val = (0 << MIPI_CSIS_ISPSYNC_HSYNC_LINTV_OFFSET) |
@@ -730,6 +752,7 @@ static int mipi_csis_enum_mbus_code(struct v4l2_subdev *mipi_sd,
 		return -EINVAL;
 
 	csis_fmt = find_csis_format(code->code);
+	printk("liutest csis_fmt->code %x\n", csis_fmt->code);
 	if (csis_fmt == NULL) {
 		dev_err(state->dev, "format not match\n");
 		return -EINVAL;
-- 
2.25.1

